// Code generated by MockGen. DO NOT EDIT.
// Source: ipetrepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	models "pet_store_rest_api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPetRepository is a mock of IPetRepository interface.
type MockIPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPetRepositoryMockRecorder
}

// MockIPetRepositoryMockRecorder is the mock recorder for MockIPetRepository.
type MockIPetRepositoryMockRecorder struct {
	mock *MockIPetRepository
}

// NewMockIPetRepository creates a new mock instance.
func NewMockIPetRepository(ctrl *gomock.Controller) *MockIPetRepository {
	mock := &MockIPetRepository{ctrl: ctrl}
	mock.recorder = &MockIPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPetRepository) EXPECT() *MockIPetRepositoryMockRecorder {
	return m.recorder
}

// AddNewPet mocks base method.
func (m *MockIPetRepository) AddNewPet(newPet models.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPet", newPet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPet indicates an expected call of AddNewPet.
func (mr *MockIPetRepositoryMockRecorder) AddNewPet(newPet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPet", reflect.TypeOf((*MockIPetRepository)(nil).AddNewPet), newPet)
}

// GetPet mocks base method.
func (m *MockIPetRepository) GetPet(petId int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPet", petId)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPet indicates an expected call of GetPet.
func (mr *MockIPetRepositoryMockRecorder) GetPet(petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPet", reflect.TypeOf((*MockIPetRepository)(nil).GetPet), petId)
}

// GetPetByStatus mocks base method.
func (m *MockIPetRepository) GetPetByStatus(status []string) []models.Pet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetByStatus", status)
	ret0, _ := ret[0].([]models.Pet)
	return ret0
}

// GetPetByStatus indicates an expected call of GetPetByStatus.
func (mr *MockIPetRepositoryMockRecorder) GetPetByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByStatus", reflect.TypeOf((*MockIPetRepository)(nil).GetPetByStatus), status)
}

// UpdatePet mocks base method.
func (m *MockIPetRepository) UpdatePet(petInfo models.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePet", petInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockIPetRepositoryMockRecorder) UpdatePet(petInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockIPetRepository)(nil).UpdatePet), petInfo)
}

// DeletePet mocks base method.
func (m *MockIPetRepository) DeletePet(petId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePet", petId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockIPetRepositoryMockRecorder) DeletePet(petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockIPetRepository)(nil).DeletePet), petId)
}
